def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = left + (right - left) // 2  # Calculate the middle index
        mid_element = arr[mid]

        if mid_element == target:
            return mid  # Element found, return its index
        elif mid_element < target:
            left = mid + 1  # Adjust the search range to the right half
        else:
            right = mid - 1  # Adjust the search range to the left half

    return -1  # Element not found in the array

# New feature: Allow searching in a specific range of the array
def binary_search_in_range(arr, target, start, end):
    if start < 0 or end >= len(arr) or start > end:
        return -1  # Invalid range

    left, right = start, end

    while left <= right:
        mid = left + (right - left) // 2
        mid_element = arr[mid]

        if mid_element == target:
            return mid
        elif mid_element < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

# Example usage
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 7
result = binary_search(arr, target)

if result != -1:
    print(f"Element {target} found at index {result}")
else:
    print(f"Element {target} not found in the array")

# Example usage of the new feature
start_index = 3
end_index = 7
result = binary_search_in_range(arr, target, start_index, end_index)

if result != -1:
    print(f"Element {target} found in the range [{start_index}, {end_index}] at index {result}")
else:
    print(f"Element {target} not found in the specified range")

